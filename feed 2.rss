<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>이름</title><description>설명설명</description><link>https://kts224.github.io</link><language>en</language><lastBuildDate>Sun, 18 Jun 2023 05:09:33 +0900</lastBuildDate><pubDate>Sun, 18 Jun 2023 05:09:33 +0900</pubDate><ttl>250</ttl><atom:link href="https://kts224.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%86%E1%85%B5%E1%84%8B%E1%85%AA%E1%86%AB%F0%9F%94%A5</guid><title>TIL (Today I Learned)미완🔥</title><description>객체지향 프로그래밍</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%86%E1%85%B5%E1%84%8B%E1%85%AA%E1%86%AB%F0%9F%94%A5</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)</h3><p>2022-03-10</p><br>

##### 객체지향 프로그래밍 (Object Oriented Programming)

>  컴퓨터 프로그래밍의 패러다임 중 하나이다. 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.

https://ko.wikipedia.org/wiki/객체_지향_프로그래밍

장점 👍

- 코드 재사용성이 증가한다
- 독립적인 객체를 사용 - 생산성 향상 
- 유지보수 용이
- 직관적인 코드 
- 대형 프로젝트에 용이하다

단점 👎

- 설계 시간이 비교적 오래걸린다
- 메모리 증가
- 절차지향에 비해 상대적으로 느린 처리속도
- 다중 상속이 되면 복잡해 질 수 있다
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%91%E1%85%B3%E1%84%85%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3</guid><title>TIL (Today I Learned)🔥프레임워크</title><description>프레임워크와 라이브러리</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%91%E1%85%B3%E1%84%85%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%B7%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3</link><pubDate>Tue, 8 Mar 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)🔥</h3><p>2022-03-08</p><br>

## 프레임워크

틀 뼈대를 미리 만들어놓은것.

라이브러리를 포함하는 상위개념?

정해진 규칙대로 안짜면 작동을 안함

프레임워크 내부에 이미 다양한 코드들이 구현되어있다.

개발편의성 상승.유지보수 용이등 장점이있지만

의존도가 늘어난다 , 자유도 하락


##  라이브러리 

재사용이 가능한 코드들의 집합

<br><br>

##### 제어의 역전(Inversion Of Control)

내 코드들이 호출하는것은 라이브러리

프레임워크가 호출하는것은 내 코드
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5readLine</guid><title>TIL (Today I Learned)🔥readLine</title><description>Swift의 입력</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5readLine</link><pubDate>Mon, 7 Mar 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)🔥</h3><p>2022-03-07</p><br>

값을 입력 받고싶을때 
readLine() 함수를 이용하면 가능하다

```swift
print("입력해주세요 : ")
let input: String? = readLine()
```

- 값은 항상 옵셔널로 나온다.
- 항상 문자열로 인식한다.

<br><br>

```swift
print("숫자를 입력해주세요 : ")
let inputValues = Int(readLine()!)!
```

이렇게 하면 인티저형으로 값이 나온다.
하지만 만약 공백이나 문자열을 입력할경우 런타임오류가 발생한다
강제언레핑은 위험하니까 다른방법을 생각해보자.

<br><br>

```swift
let numbers = readLine()!
let numbersArray = numbers.components(separatedBy: " ").map{ Int($0)! }
print(numbersArray.reduce(0, +))
```

`고차함수`
`map` `reduce` 를 활용하여 1 2 3 4를 입력받으면
1+2+3+4 = 10 이 나온다..
아직은 너무어렵다 클로저.
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%91%E1%85%A5%E1%84%90%E1%85%B52</guid><title>TIL (Today I Learned)프로퍼티2</title><description>Swift 연산프로퍼티</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%91%E1%85%A5%E1%84%90%E1%85%B52</link><pubDate>Fri, 4 Mar 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)프로퍼티2</h3><p>2022-03-04</p><br>

### 연산프로퍼티

연산해서 값을 얻을수있다.

```swift
struct Person {
    var koreanAge: Int
    var americanAge: Int {
        get {
            return koreanAge - 1
        }
        set(newValue) {
            koreanAge = newValue + 1
        }
    }
}

var misterLee: Person = Person(koreanAge: 10)
print(misterLee.americanAge)  // 9
print(misterLee.koreanAge)    // 10

misterLee.americanAge = 10
print(misterLee.americanAge)  // 20
print(misterLee.koreanAge)    // 21
```

`koreanAge` 에 10 을 할당해 주면

자동적으로 연산되어 `misterLee.americanAge = 10`

값으로 `koreanAge - 1` 이 get 안에 return 값으로 얻어지고

`americanAge` 값을 설정해 주면 
`koreanAge` 값이
set으로 `newValue + 1` 설정된다.


더 좋은 예시를 생각 하려고 노력해지만..

야곰의 예시보다 좋은 예시가 생각이 안난다.

<br><br><br>

### 지연 저장 프로 퍼티

`lazy var`

값이 처음 사용되기 전까지 저장되지않는다.

`var` 로 선언해야한다. (let x)

공간낭비를 막을수있다.

저장프로퍼티의 초기화가 지연된다.


<br><br><br>


###### 초심을 잃었다.. TIL이 예전같지않다..😂😂😇

###### 다음주엔 더 열심히!🔥
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A5%E1%84%86%E1%85%B5%E1%84%8B%E1%85%AA%E1%86%AB%F0%9F%94%A5</guid><title>TIL (Today I Learned)클로저미완🔥</title><description>Swift 클로저</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A5%E1%84%86%E1%85%B5%E1%84%8B%E1%85%AA%E1%86%AB%F0%9F%94%A5</link><pubDate>Thu, 3 Mar 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)클로저🔥</h3><p>2022-03-03</p><br>

## 클로저

후행클로저

클로저가 함수의 마지막 전달 인자라면 
마지막 매개변수 이름을 생략한 후 
함수 소괄호 외부에 클로저를 구현할수 있다./



반환타입 생략

인트 인트면 어짜피 나올값도 인트이기때문에 
나올 반환타입을 생략할수있다 (-> Int) 생략가능


매개변수도 생략가능
in 까지 생략

단축인자이름
return `$`0 + $1

암시적 반환 표현
return 도 생략가능

과도한 축약은 이해가 어려움 ,,, 너무 축약하지는 말자


]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8B%E1%85%A9%E1%86%B8%E1%84%89%E1%85%A7%E1%84%82%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%82%E1%85%B5%E1%86%BC</guid><title>TIL (Today I Learned)🔥옵셔널체이닝</title><description>옵셔널 체이닝</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8B%E1%85%A9%E1%86%B8%E1%84%89%E1%85%A7%E1%84%82%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%82%E1%85%B5%E1%86%BC</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)🔥</h3><p>2022-02-28</p><br>

## 옵셔널 체이닝

- 옵셔널 체이닝의 결과는 항상 옵셔널
- 하나라고 nil이 있으면 nil반환
- 체인처럼 이어져있음
- 강제언래핑의 대안으로 사용 가능
  
강제언래핑(!)은 사용했을때 그값이 없으면

런타임에러가 발생하지만 

옵셔널 체이닝은 nil을 반환하여 에러를 막을수있다.

<br>
<br>

## nil 병합 연산자 (nil-coalescing operator)

옵셔널 체이닝은 값이 없으면 nil을 반환하지만

nil 병합 연산자를 사용하면

nil대신 다른값을 반환할 수 있다.

```swift
var number: Int?
var nilCoalescingNumber = number ?? 0 
//nilCoalescingNumber = 0
```

<br>
<br>

마크다운

줄바꿈: `<br>`

공백: `&nbsp;`

문자사이공백 (　)  <- 괄호안에 있는거 복붙 
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A2%E1%84%89%E1%85%B3%E1%84%8B%E1%85%AA%20%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9%E1%84%8E%E1%85%A6</guid><title>TIL (Today I Learned)🔥클래스와 구조체</title><description>구조체와 클래스</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8F%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A2%E1%84%89%E1%85%B3%E1%84%8B%E1%85%AA%20%E1%84%80%E1%85%AE%E1%84%8C%E1%85%A9%E1%84%8E%E1%85%A6</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)🔥</h3><p>2022-02-25</p><br>

# 구조체와 클래스

구조체는 `memberwise` 기능 덕분에 

선언시 프로퍼티값을 정해주지 않아도 됨

하지만 클래스는 안됨

구조체에서는 자신의 프로퍼티값을 바꿔주려면

변경하려는 메서드 앞에 `mutating` 붙여야 한다.

구조체는 값타입이라 인스턴스에 값 전달할 때 값을 복사하여 전달

하지만 클래스는 참조타입으로 값 참조

ex)

```swift
struct PersonB {
    var name: String
    var age: Int
    
    mutating func addOneToAge() {
        self.age += 1
    }
}
```

<br>
<br>


## 상속 

<br>

- 상속은 클래스에서만 가능

- 한 개의 자식 클래스는 한 개의 부모 클래스만 상속 가능

<br>
<br>

Person 은 부모 클래스 

Student 는 자식 클래스

이렇게 물려주는 것 -> `서브클래싱`

<br>
<br>


오버라이드 -> 재정의

아래에서 student는 person클래스를 상속받았기에

기능을 이어받았는데 

그기능을 변경하고싶을때

`override` 기능을 사용하면 변경 가능하다.

<br>
<br>


자식 클래스에서 재정의했는데

부모 클래스의 기능을 사용하고 싶으면

`super` 붙이면 가능

<br>







```swift
class Person {
    var weight = 100
    
    func eat() {
        weight += 1
    }
} //부모 클래스

class Student: Person {
    override func eat() {
        weight += 5
    }

    func eatAsPerson() {
        super.eat()
    }
} //자식 클래스

let kim = Student()

kim.eat()
print(kim.weight) //105
kim.eatAsPerson()
print(kim.weight) //106

```
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220224%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%91%E1%85%A5%E1%84%90%E1%85%B5</guid><title>TIL (Today I Learned)🔥</title><description>타입프로퍼티</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220224%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%91%E1%85%A5%E1%84%90%E1%85%B5</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-24🎂</p><br>


### 타입프로퍼티

`static` 을 붙여서

인스턴스의 생성 여부와 상관없이 
사용할 수 있다.

```swift
struct SomeStructure {
    static var someProperty: Int = 10
    var property: Int = 11
}
var staticVar = SomeStructure.someProperty // (o)
//var nonStaticVar = SomeStructure.property // (x)
```

### 프로퍼티 감시자

프로퍼티의 값이 변경됨에 따라 호출. 

변경값이 원래값과 같더라도 호출된다.

`willSet` 변경 직전 호출

`didSet` 변경 직후 호출

 ```swift
class Person {
    var point: Int = 1000 {
        willSet {
            print("\(point) -> \(newValue) 포인트적립 예정입니다.")
        }
        didSet {
            print("\(oldValue) -> \(point) 포인트적립 되었습니다.")
        }
    }
}
let kim = Person()

//1000 -> 1200 포인트적립 예정입니다.
kim.point = 1200
//1000 -> 1200 포인트적립 되었습니다.
```
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220223%E1%84%8B%E1%85%B5%E1%84%82%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AF%E1%84%85%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A7</guid><title>TIL (Today I Learned)🔥</title><description>타입과 인스턴스</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220223%E1%84%8B%E1%85%B5%E1%84%82%E1%85%B5%E1%84%89%E1%85%A7%E1%86%AF%E1%84%85%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%A7</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-23</p><br>

## 타입

- 타입은 객체라고 부르기도한다.
- 타입의 종류가 크게 세 가지 -> 열거형, 구조체, 클래스
- 타입을 정의할 때 타입의 이름은 대문자

- 타입과 연관된 값들 -> 속성(Property)

- 타입과 연관된 함수 -> 메소드(Method)

<br>
<br>

### 타입(객체) {enum struct class}
  
### ↓↓
  
### 인스턴스(실체)

<br>

인스턴스가 초기화 될 때 인스턴스의 프로퍼티에 값이 있다는 것이 항상 보장되어야 한다

하지만 프로퍼티 기본값을 지정해주기 어려울때

이니셜라이저`init` 사용하여 

인스턴스를 생성할때 초기값 지정가능

```swift
class Person {
    let name: String = "kim"
    var money: Int = 10000
}
var Kim = Person() // = Person.init()
Kim.money = 100000
//Kim.name = "Lee"  // name이 let으로 선언되어 변경 불가능
print(Kim.money) // 100000
```

<br>

#   &nbsp;&nbsp;&nbsp; ↓　↓

<br>

#### init 사용

```swift
class Person {
    let name: String
    var money: Int
    init(name: String, money: Int) {
        self.name = name
        self.money = money
    }
}
//var Kim = Person() // (x) name: , money: 값 넣어야함
var Kim = Person(name: "kim", money: 10000)
Kim.money = 100000
print(Kim.money) // 100000
```
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220222inout</guid><title>TIL (Today I Learned)🔥</title><description>inout func</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220222inout</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-22</p><br>

```swift
var number = 100

func add(to number: Int) -> Int {
    number += 1
    return number
}
```

![https://s3.ap-northeast-2.amazonaws.com/media.yagom-academy.kr/resources/usr/61ee3b7c2947bf40f08f32e4/20220223/6216150d536b5e1551d11006.png](https://s3.ap-northeast-2.amazonaws.com/media.yagom-academy.kr/resources/usr/61ee3b7c2947bf40f08f32e4/20220223/6216150d536b5e1551d11006.png)



1을 더하는 함수를 만들었는데 

이처럼 오류가 나왔다.

<br>

```swift
func addOne(to number: Int) -> Int {
    var functionNumber = number
    functionNumber += 1
    return functionNumber
}

print(addOne(to: number))  // 101
print(number)  // 100
```

이렇게 함수안에 변수를 선언하면 답은 나오지만 

다시 `number` 를 출력했을 때 값은 변하지 않았다.

그렇게 구글링해본결과

<br>

# inout

```swift
func addTwo(to number: inout Int) -> Int {
    number += 2
    return number
}

print(addTwo(to: &number))  // 102
print(number)  // 102
```

함수 매개변수 타입선언 앞에 ``inout`` 을 붙이고

함수 호출 때 ``&`` 를 붙여주면 

`number`값도 동일하게 바뀌게 되는 것을 알게 되었다.

<br>

#### inout 이란 

**copy-in copy-out** 의 줄임말이며

- 함수 호출  
         ↓
- 매개변수 자리에 변수 복사
         ↓
- 함수 내부 값 수정
         ↓
- 반환한 값 변수에 재할당

         과정으로 이루어진다.


<br>


### 🚫
```swift
let letNumber = 100
addTwo(to: &letNumber) //(x)
addTwo(to: &10) //(X)
```

- 상수나 리터럴은 `inout` 매개변수에 인자값으로 전달할 수 없다.

<br>

### 참조

https://syjdev.tistory.com/21

꼼꼼한 재은씨의 swift: 문법편
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8B%E1%85%A9%E1%86%B8%E1%84%89%E1%85%A7%E1%84%82%E1%85%A5%E1%86%AF%E1%84%87%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%83%E1%85%B5%E1%86%BC</guid><title>옵셔널 바인딩</title><description>옵셔널 바인딩</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5%E1%84%8B%E1%85%A9%E1%86%B8%E1%84%89%E1%85%A7%E1%84%82%E1%85%A5%E1%86%AF%E1%84%87%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%83%E1%85%B5%E1%86%BC</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h3>TIL (Today I Learned)🔥</h3><p>2022-02-21</p><h1>옵셔널 바인딩</h1><br>

조건문을 이용해 (let)상수 또는 (var)변수에 옵셔널값을 대입하는 방식인데

그 결과의 참 거짓 값에 따라 nil 값인지 아닌지 구분할수있다.

```swift
var optionalNumber1: Int? = 12
var optionalNumber2: Int? = nil

print(optionalNumber1) // Optional(12)
print(optionalNumber2) // nil
```
<br>

## if let

```swift
func optionalIf(_ optionalNumber: Int?) {
    if let number = optionalNumber {
        print("\(number) 반환")
    } else {
        print("값 반환 실패")
    }
}

optionalIf(optionalNumber1)  //12 반환
optionalIf(optionalNumber2)  //값 반환 실패
```
optianalNumber 를 number 에 대입하여 

대입이 가능하면 참. 따라서 if조건에맞는 값이 나오고

대입할수없으면 else 문이 실행된다.

<br>

## guard let
```swift
func optionalGuard(_ optionalNumber: Int?) {
    guard let number = optionalNumber else {
        print("값 반환 실패")
        return
    }
    print("\(number) 반환")
}

optionalGuard(optionalNumber1) //12 반환
optionalGuard(optionalNumber2) //값 반환 실패
```

guard let 은 조건에 만족하면 넘어가고

만족하지못하면 else 문이 실행된다. 
]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)220218%E1%84%90%E1%85%B2%E1%84%91%E1%85%B3%E1%86%AF%F0%9F%94%A5</guid><title>TIL (Today I Learned)🔥</title><description>Swift 튜플</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)220218%E1%84%90%E1%85%B2%E1%84%91%E1%85%B3%E1%86%AF%F0%9F%94%A5</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-18</p><h1>튜플</h1><p>한 가지 타입의 아이템만 저장할 수 있는 배열이나 딕셔너리와는 달리</p><p>하나의 튜플에 여러 가지 타입의 아이템을 저장할 수 있지만</p><p>배열이나 집합과 달리 소괄호()를 사용하여 정의한다.</p><pre><code><span class="keyword">var</span> tuple = (<span class="string">"zero"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">"three"</span>)
</code></pre><pre><code>tuple.<span class="number">0</span> <span class="comment">// zero</span>
tuple.<span class="number">1</span> <span class="comment">// 1</span>
tuple.<span class="number">2</span> <span class="comment">// 2</span>
tuple.<span class="number">3</span> <span class="comment">// three</span>
</code></pre><p>튜플안의 튜플의 값을 접근할 수도 있다.</p><h3>튜플속 튜플</h3><pre><code><span class="keyword">var</span> tuple = (<span class="string">"zero"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">"three"</span>)
<span class="keyword">var</span> otherTuple = ((tuple), <span class="number">4</span>, <span class="number">5</span>)
</code></pre><pre><code>otherTuple.<span class="number">0</span> <span class="comment">// ("zero", 1, 2, "three")</span>
otherTuple.<span class="number">0.0</span> <span class="comment">// zero</span>
otherTuple.<span class="number">0.1</span> <span class="comment">// 1</span>
otherTuple.<span class="number">1</span> <span class="comment">// 4</span>
otherTuple.<span class="number">2</span> <span class="comment">// 5</span>
</code></pre><h3>이름 붙히기</h3><pre><code><span class="keyword">var</span> namedTuple = (age: <span class="number">50</span>, place: [<span class="string">"cafe, home"</span>]) <span class="comment">// (age: 50, place: ["cafe, home"])
// namedTuple = ("lol", ["playground", "school"])  (X)
// age 값이 Int 값이었으므로 String 타입으로 변경이 불가능하다</span>
namedTuple.<span class="property">age</span> <span class="comment">// 50</span>
namedTuple.<span class="property">place</span> <span class="comment">// ["cafe, home"]</span>
</code></pre><ul><li>이름을 붙여서 이름으로 값에 접근할 수 있다.</li></ul><ul><li>선언하고 나면 같은 타입 값으로 만 바꿀 수 있다.</li></ul><ul><li>값의 추가나 삭제는 할 수 없다.</li></ul><h4>참조</h4><p>https://zeddios.tistory.com/238</p><p>https://docs.swift.org/swift-book/ReferenceManual/Types.html</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220217</guid><title>TIL (Today I Learned)🔥</title><description>컴파일 에러</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220217</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-17</p><h2>Error</h2><h3>컴파일 에러</h3><ul><li>컴파일하는 과정에 나타나는 에러</li><li>컴파일 시 에러 위치를 알려주기 때문에 찾기 쉽다</li><li>수정하지 않으면 컴파일되지 않는다</li><li>문법을 잘못 작성해서 컴파일할 수 없는 에러</li></ul><ul><li>예시 <img src="https://s3.ap-northeast-2.amazonaws.com/media.yagom-academy.kr/resources/usr/61ee3b7c2947bf40f08f32e4/20220218/620fb0f66d880537faa0dfbf.png" alt="https://s3.ap-northeast-2.amazonaws.com/media.yagom-academy.kr/resources/usr/61ee3b7c2947bf40f08f32e4/20220218/620fb0f66d880537faa0dfbf.png"/></li></ul><h3>런타임 에러</h3><ul><li>컴파일은 완료되었지만 실행 중에 발생하는 에러</li><li>프로그래머의 설계 미숙으로 발생할 수 있다</li><li>무한 루프, 0으로 나누는 경우, 메모리 부족, 프로그래밍 오류 등</li><li>컴파일러가 인지할 수 없다</li><li>에러 발생 시 역추적해야 하기 때문에 까다롭다</li></ul><h3>참조</h3><p>https://junboom.tistory.com/39 https://velog.io/@un1945/typeOfError#참고 https://jsj0903.tistory.com/6</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220216</guid><title>TIL (Today I Learned)🔥</title><description>Swift 정렬</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220216</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-16</p><pre><code><span class="keyword">var</span> array: [<span class="type">Int</span>] = [<span class="number">3</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>]
<span class="keyword">var</span> sortedArray: [<span class="type">Int</span>] = []
<span class="keyword">var</span> stringArray: [<span class="type">String</span>] = [<span class="string">"강아지"</span>, <span class="string">"고양이"</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"Dog"</span>, <span class="string">"a"</span> , <span class="string">"A"</span>]
</code></pre><h2>sort()</h2><pre><code>array.<span class="call">sort</span>() <span class="comment">//[1, 2, 3, 6, 67]</span>
array.<span class="call">sort</span>(by: &gt;) <span class="comment">//[67, 6, 3, 2, 1]</span>
stringArray.<span class="call">sort</span>(by: &lt;) <span class="comment">//["A", "Dog", "a", "cat", "dog", "강아지", "고양이"]</span>
</code></pre><ul><li>sort()는 원래 값의 순서를 바꾼다</li><li>() 안에 by: 부등호를 사용 하여 내림 혹은 오름차순 정렬가능하다</li><li>기본값은 오름차순 ( &lt; )</li><li>문자타입도 정렬이 가능하다</li></ul><h2>sorted()</h2><pre><code>sortedArray = array.<span class="call">sorted</span>() <span class="comment">//[1, 2, 3, 6, 67]</span>
</code></pre><ul><li>원래 값의 순서는 건드리지 않는다</li><li>sort() 처럼 단독 사용이 안되며 받을 값을 지정해야 한다</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220215</guid><title>TIL (Today I Learned)🔥</title><description>Swift의 컬렉션 타입 Array</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220215</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-15</p><h2>Array</h2><ul><li>순서를 갖고 중복이 가능하다</li><li>빈 배열을 만들때는 반드시 타입을 명시해야한다</li><li>순서를 인덱스라고 하며 0부터 시작한다</li></ul><pre><code><span class="keyword">var</span> animal: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = <span class="type">Array</span>&lt;<span class="type">String</span>&gt;()
</code></pre><h3>추가</h3><pre><code>animal.<span class="call">append</span>(<span class="string">"tiger"</span>)
<span class="comment">//["tiger"]</span>
animal.<span class="call">append</span>(contentsOf: [<span class="string">"lion, elephant"</span>])
<span class="comment">//["tiger", "lion", "elephant"]</span>
animal.<span class="call">insert</span>(<span class="string">"monkey"</span>, at: <span class="number">2</span>)
<span class="comment">//["tiger", "lion", "monkey", "elephant"]</span>
animal.<span class="call">insert</span>(contentsOf: [<span class="string">"lion2, elephant2"</span>], at: <span class="number">2</span>)
<span class="comment">//["tiger", "lion", "lion2", "elephant2", "monkey", "elephant"]</span>
</code></pre><h3>교체</h3><pre><code>animal[<span class="number">0</span>...<span class="number">3</span>] = [<span class="string">"dog"</span>]
<span class="comment">//["dog", "monkey", "elephant"]</span>
animal.<span class="call">replaceSubrange</span>(<span class="number">1</span>...<span class="number">2</span>, with: [<span class="string">"cat"</span>])
<span class="comment">//["dog", "cat"]</span>
</code></pre><h3>삭제</h3><pre><code>animal.<span class="call">remove</span>(at: <span class="number">0</span>)
<span class="comment">//["cat"]</span>
animal.<span class="call">removeAll</span>()
<span class="comment">//[]</span>
</code></pre><pre><code><span class="comment">//개수 판별 가능</span>
animal.<span class="property">count</span> == <span class="number">0</span> 
<span class="comment">//true 또는 false 값으로 판별 가능</span> 

animal.<span class="property">isEmpty</span> <span class="comment">// 비어있는지 true false</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220214</guid><title>TIL (Today I Learned)🔥</title><description>Swift의 컬렉션 Set</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220214</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-14</p><h1>컬렉션 타입</h1><h2>Set</h2><p>순서가 없고 멤버가 유일한 컬렉션 (중복 x)</p><pre><code><span class="keyword">var</span> integerSet: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]
<span class="call">print</span>(integerSet) <span class="comment">// [5, 3, 1, 6, 4, 2]</span>
<span class="call">print</span>(integerSet.<span class="call">sorted</span>()) <span class="comment">// [1, 2, 3, 4, 5, 6]</span>
<span class="call">print</span>(integerSet.<span class="property">count</span>) <span class="comment">// 6</span> 
</code></pre><ul><li>값의 순서는 실행마다 달라졌고</li><li>중복된 값은 하나로 되었다</li><li>만약 오름차순으로 정렬하고 싶으면 .sorted() 로 가능하다</li></ul><pre><code><span class="comment">//값 추가</span>
integerSet.<span class="call">insert</span>(<span class="number">100</span>)
<span class="call">print</span>(integerSet) <span class="comment">// [5, 3, 1, 100, 6, 4, 2]</span>
</code></pre><ul><li>추가된 값은 제일끝이 아닌 아무곳이나 들어갔다 (실행마다 달라짐)</li></ul><pre><code><span class="comment">//값 제거</span>
integerSet.<span class="call">remove</span>(<span class="number">100</span>) <span class="comment">//지정값제거</span>
integerSet.<span class="call">removeFirst</span>() <span class="comment">// 가장 왼쪽값 제거</span>
integerSet.<span class="call">removeAll</span>() <span class="comment">//다 제거</span>
</code></pre><pre><code><span class="comment">//반복문</span>
<span class="keyword">for</span> value <span class="keyword">in</span> integerSet {
    <span class="call">print</span>(value)
}
</code></pre><p>반복문으로 활용할 수 있을까? 고민해봐야겠다..</p><h2>Set 집합연산</h2><pre><code><span class="keyword">let</span> setA: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]
<span class="keyword">let</span> setB: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]

<span class="comment">// 합집합</span>
<span class="keyword">let</span> union: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = setA.<span class="call">union</span>(setB)

<span class="comment">// 교집합</span>
<span class="keyword">let</span> intersection: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = setA.<span class="call">intersection</span>(setB)

<span class="comment">// 차집합</span>
<span class="keyword">let</span> subtractiong: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = setA.<span class="call">subtracting</span>(setB)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220211</guid><title>TIL (Today I Learned)🔥</title><description>Swift의 데이터 타입</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220211</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-11</p><h1>데이터 타입</h1><p>모든 데이터타입 이름은 첫 글자가 대문자로 시작하는 대문자 카멜케이스를 사용한다</p><h2>불리언(Bool)</h2><pre><code><span class="keyword">var</span> someBool: <span class="type">Bool</span> = <span class="keyword">true</span>
<span class="comment">// true 또는 false 값만 갖을 수 있다.</span>
</code></pre><h2>정수(Int)</h2><pre><code><span class="keyword">var</span> someInt: <span class="type">Int</span> = <span class="number">1000</span>
<span class="comment">// 정수값만 가능</span>

<span class="keyword">var</span> someUInt: <span class="type">UInt</span> = <span class="number">100</span>
<span class="comment">// 0과 양의 정수값만 가능   -&gt; -부호 불가</span>

someInt = someUInt       <span class="comment">// (x) 타입이 달라서 오류 발생</span> 
someInt = <span class="type">Int</span>(someUInt)  <span class="comment">// (o)</span> 
</code></pre><h2>실수(Float,Double)</h2><pre><code><span class="keyword">var</span> someFloat: <span class="type">Float</span> = <span class="number">3.123</span>
<span class="comment">//32비트의 부동소수 표현</span>

<span class="keyword">var</span> someDouble: <span class="type">Double</span> = <span class="number">123133.2123</span>
<span class="comment">//64비트의 부동소수 표현</span>
</code></pre><h2>문자(Character)</h2><pre><code><span class="keyword">var</span> someCharacter: <span class="type">Character</span> = <span class="string">"A"</span>
someCharacter = <span class="string">"♡"</span>
someCharacter = <span class="string">"ㅁ"</span>
<span class="comment">// 한글자만 가능</span> 
</code></pre><h2>문자열(String)</h2><pre><code><span class="keyword">var</span> someString: <span class="type">String</span> = <span class="string">"hello"</span>
<span class="comment">//문자열</span> 
someString.<span class="call">append</span>(<span class="string">" world!"</span>)
someString = someString + <span class="string">" world!!"</span> 
<span class="comment">//문자열 이어붙이기</span>

<span class="call">print</span>(someString) <span class="comment">//hello world! world!!</span>

<span class="call">print</span>(someString.<span class="property">isEmpty</span>) <span class="comment">//false
//빈 문자열인지 참 거짓 판별가능</span>

<span class="call">print</span>(someString.<span class="property">count</span>) <span class="comment">//20
//문자의 수 세기</span>


<span class="call">print</span>(someString.<span class="call">hasPrefix</span>(<span class="string">"hell"</span>)) <span class="comment">// true
// 문자열이 () 로 시작 하는지 Bool 값으로 확인</span>  

<span class="call">print</span>(someString.<span class="call">hasSuffix</span>(<span class="string">"!!"</span>))  <span class="comment">//true
// 문자열이 () 로 끝나는지 Bool 값으로 확인</span>

<span class="call">print</span>(someString.<span class="call">uppercased</span>())  
<span class="comment">// 대문자 변환. HELLO WORLD! WORLD!!</span>

<span class="call">print</span>(someString.<span class="call">lowercased</span>()) 
<span class="comment">// 소문자 변환. hello world! worl</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220210</guid><title>TIL (Today I Learned)🔥</title><description>커밋 메시지</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5220210</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-10</p><h2>커밋 메시지 규칙</h2><ul><li>제목과 본문을 빈 행으로 구분</li><li>제목을 50글자 내로 제한</li><li>제목 첫글자는 대문자로 작성</li><li>제목 끝 마침표 x</li><li>제목은 명령문 사용, 과거형 x</li><li>본문의 각 행은 72글자 내로 제한</li><li>어떻게 보다는 무엇과 왜를 설명</li></ul><h2>커밋 메시지 구조</h2><pre><code>type : title

body (본문)

footer (꼬리말)
</code></pre><h2>커밋 타입</h2><p>feat : 새로운 기능</p><p>fix : 버그 수정</p><p>docs : 문서 변경</p><p>style : 스타일 변경 세미콜론 누락 등 코드자체 변경이 없는 경우</p><p>refactor : 리펙토링 (동작 변화없이 내부 구조 변경 -&gt; 가독성 유지보수성)</p><p>chore : 빌드 작업</p><p>test : 테스트 추가</p><h3>참조</h3><p>https://junhyunny.github.io/information/github/git-commit-message-rule/</p><p>https://ikkison.tistory.com/82</p><p>https://meetup.toast.com/posts/106</p><p>https://udacity.github.io/git-styleguide/</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)220209%F0%9F%94%A5</guid><title>TIL (Today I Learned)🔥</title><description>Swift 함수</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)220209%F0%9F%94%A5</link><pubDate>Wed, 9 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-09</p><h2>함수 (Func)</h2><pre><code><span class="keyword">func</span> plusTwo(x: <span class="type">Int</span>) -&gt; <span class="type">Int</span> {
    <span class="keyword">return</span> x + <span class="number">2</span>
}
</code></pre><p>인수(함수에 전달받은값,argument)가 들어오고,</p><p>반환값(return value)이 나간다</p><p>x -&gt; x + 2</p><ul><li>매개변수(parameter) : 인수가 전달될 자리</li></ul><h2>print함수</h2><pre><code><span class="call">print</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> , separator: <span class="string">"!"</span>)
<span class="comment">//separator: "m"    각 인자 사이의 띄어쓰기를 "m"로 바꿔준다</span>

---&gt; <span class="number">1</span>!<span class="number">2</span>!<span class="number">3</span>


<span class="call">print</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,terminator: <span class="string">" "</span>)
<span class="call">print</span>(<span class="number">4</span>,<span class="number">5</span>)
<span class="comment">//terminator: "m"   줄바꿈을 하지않고 대신 "m" 출력</span>

---&gt; <span class="number">1 2 3 4 5</span>


<span class="string">"   "</span> 안에 인자를 넣으려면 
<span class="call">print</span>(<span class="string">"</span>\(name)<span class="string">은 이름"</span>)  <span class="comment">// \()로 묶어준다</span>
</code></pre><h3>변수</h3><ul><li>var {이름} = {값}</li></ul><h3>상수</h3><ul><li>let {이름} = {값}<ul></ul></li></ul><ul><li>상수는 값을 할당하면 변경불가</li></ul><h2>네이밍</h2><ul><li>숫자로 시작 불가</li><li>띄어쓰기 불가</li><li>특수문자는 $ 또는 _ 허용되지만 $ 첫글자로 사용불가</li><li>변수나 함수의 이름 첫글자는 소문자로 시작하자</li><li>변수의 이름은 명사 . 함수의 임름은 동사로 시작하자</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5</guid><title>TIL (Today I Learned)🔥</title><description>Git 의 영역</description><link>https://kts224.github.io/posts/TIL%20(Today%20I%20Learned)%F0%9F%94%A5</link><pubDate>Tue, 8 Feb 2022 00:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>TIL (Today I Learned)🔥</h1><p>2022-02-08</p><h2>Git 의 영역</h2><p>Working directory</p><ul><li>↓↓↓↓ git add .</li></ul><p>Staging area (Index) // 작업트리와 저장소 사이에있는 가상의 준비영역</p><ul><li>↓↓↓↓ git commit -m "메세지"</li></ul><p>Local repository</p><ul><li>↓↓↓↓ git push {저장소} {브랜치}</li></ul><p>Remote repository (github)</p><h2>Git 명령어</h2><pre><code>git <span class="keyword">init</span> <span class="comment">// 저장소 생성</span>
git <span class="call">clone</span> {복사한Url} 
git <span class="call">add</span> {} <span class="comment">//원하는 것만 staging area에 올림</span>
git add .  <span class="comment">//다올림</span>
git reset  <span class="comment">// 스테이지 올라간 파일 취소</span>
git commit -m <span class="string">"메세지"</span>  <span class="comment">//  로컬저장소에 저장</span>
git log      <span class="comment">//커밋 이력조회</span> 
git <span class="call">branch</span> {이름} <span class="comment">// 브랜치 만들기</span>
git branch  <span class="comment">// 브랜치 확인</span>
git checkout -t origin/{가져올 branch} 
<span class="comment">//작업할 브랜치를 원격저장소에서 추적</span>
git <span class="keyword">switch</span> {이름} <span class="comment">// 브랜치 이동</span>
git <span class="call">merge</span> {합칠 브랜치이름} <span class="comment">// 현재 브랜치에 다른 브랜치 병합</span>
git status <span class="comment">// 파일 상태 확인</span>
git remote <span class="comment">// 저장소명 알려줌</span>
git <span class="call">push</span> {저장소명} {브랜치명} <span class="comment">//  원격 저장소에 올림</span>
git push -<span class="call">u</span> {저장소명} {브랜치명} <span class="comment">// -u 붙이면 다음에 인자생략가능</span>
</code></pre><h3>git status</h3><p>빨강이면 스테이지 올라가지않은상태 -&gt; add 해야함<br>	초록이면 스테이지 올라감 -&gt; commit 가능</p><p>포크 -&gt;클론 -&gt; 브랜치추적 -&gt; 애드커밋푸시 -&gt; PR</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/README</guid><title>이상하게 나옴</title><description>하하하</description><link>https://kts224.github.io/posts/README</link><pubDate>Fri, 18 Jun 2021 05:08:00 +0900</pubDate><content:encoded><![CDATA[<h1>이상하게 나옴</h1><p>마크다운이 이상해 코드블럭도 이상해</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/second-post</guid><title>와우!</title><description>정말 너무 신기하네요!</description><link>https://kts224.github.io/posts/second-post</link><pubDate>Fri, 18 Jun 2021 03:00:00 +0900</pubDate><content:encoded><![CDATA[<h1>와우!</h1><p>Swift로 웹사이트 만들기!!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://kts224.github.io/posts/first-post</guid><title>데모데모</title><description>처음 올리는 글</description><link>https://kts224.github.io/posts/first-post</link><pubDate>Fri, 18 Jun 2021 02:19:00 +0900</pubDate><content:encoded><![CDATA[<h1>데모데모</h1><p>글글</p><pre><code><span class="keyword">var</span> a
</code></pre>]]></content:encoded></item></channel></rss>